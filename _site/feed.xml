<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:9000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:9000/" rel="alternate" type="text/html" /><updated>2020-10-01T17:30:35+02:00</updated><id>http://localhost:9000/feed.xml</id><title type="html">unexist.dev</title><subtitle>Random bits and rants about tech, software design and me</subtitle><entry><title type="html">Architecture validation</title><link href="http://localhost:9000/2020/09/25/architecture-validation.html" rel="alternate" type="text/html" title="Architecture validation" /><published>2020-09-25T11:00:00+02:00</published><updated>2020-09-25T11:00:00+02:00</updated><id>http://localhost:9000/2020/09/25/architecture-validation</id><content type="html" xml:base="http://localhost:9000/2020/09/25/architecture-validation.html">&lt;p&gt;Over the last few days I played with tool-based architecture validation,
to give colleagues a basic introduction to the whole topic.&lt;/p&gt;

&lt;p&gt;I tested &lt;a href=&quot;https://www.archunit.org/&quot;&gt;ArchUnit&lt;/a&gt; and &lt;a href=&quot;https://jqassistant.org/&quot;&gt;jqAssistant&lt;/a&gt;
and skipped anything, that isnâ€™t fit to be included into a build pipeline.&lt;/p&gt;

&lt;p&gt;Just for completeness: There are other well-known tools like
&lt;a href=&quot;https://structure101.com/&quot;&gt;Structure101&lt;/a&gt; or &lt;a href=&quot;https://www.hello2morrow.com/products/sotograph&quot;&gt;Sotograph&lt;/a&gt; 
commercially available, for deeper analysis of a given architecture.&lt;/p&gt;

&lt;h2 id=&quot;archunit&quot;&gt;ArchUnit&lt;/h2&gt;

&lt;p&gt;This framework comes with a really nice fluent API, which allows you to easily
create your own testcases and after a bit of initial try/error, it is pretty
clear how to roll.&lt;/p&gt;

&lt;p&gt;For example, this rule checks, if methods in the package named &lt;em&gt;test&lt;/em&gt; are public:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ArchTest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArchRule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkPlacement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resideInAnyPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..test..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bePublic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Overall, this API is quite powerful and there quite a few plugins to enhance the
impressive set. So in other words, it is always a good idea to check, if someone
already solved the problem for you.&lt;/p&gt;

&lt;p&gt;So besides simple stuff like the above, architects are probably more interested
in rules, that enforce a given layout or rather architecture.&lt;/p&gt;

&lt;p&gt;One of the better known architecture - the layered architecture - can be
checked nicely:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaClasses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassFileImporter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;importPackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.subforge&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testLayeredArch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layeredArchitecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;definedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..application..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Model&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;definedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..model..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;definedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..service..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Repository&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;definedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..repository..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Infrastructure&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;definedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;..infrastructure..&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mayNotBeAccessedByAnyLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mayOnlyBeAccessedByLayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Model&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mayOnlyBeAccessedByLayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Repository&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Repository&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mayOnlyBeAccessedByLayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whereLayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Infrastructure&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mayOnlyBeAccessedByLayers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These rules define different layers and specify the allowed interaction between
each other.&lt;/p&gt;

&lt;h2 id=&quot;jqassistant&quot;&gt;jqAssistant&lt;/h2&gt;

&lt;p&gt;In comparison to &lt;a href=&quot;https://www.archunit.org/&quot;&gt;ArchUnit&lt;/a&gt;, this framework uses a
different approach and can be broken down into three step/components:&lt;/p&gt;

&lt;h3 id=&quot;scanneranalyzer&quot;&gt;Scanner/Analyzer&lt;/h3&gt;

&lt;p&gt;The combination of both scans the given source tree, analyzed the types,
relations and so on and stores all learnings into the graph database.&lt;/p&gt;

&lt;h3 id=&quot;graph-database-neo4j&quot;&gt;Graph database (&lt;a href=&quot;https://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;Once data is in the database, it can be queried e.g. via fancy frontends
like &lt;a href=&quot;https://neo4j.com/developer/neo4j-browser/&quot;&gt;Neo4j browser&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;queryconstraint-checker&quot;&gt;Query/Constraint checker&lt;/h3&gt;

&lt;p&gt;And lastly, the selected query language (Cypher is the default here) can be
used to describe either queries to get infos, to formalize concepts or
constraints.&lt;/p&gt;

&lt;p&gt;Concepts are kind of light rules, that can be violated without problem and can
be cross referenced in other concepts or constraints, which always have a 
severity.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;I donâ€™t want to dive depper into the syntax of Cypher, but a base examples looks
like this:&lt;/p&gt;

&lt;div class=&quot;language-cypher highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;t:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:DEPENDS_ON&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;t2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This asks the database for any type named &lt;em&gt;t&lt;/em&gt;, that depends on another type
named &lt;em&gt;t2&lt;/em&gt;.&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="architecture" /><category term="validation" /><category term="ddd" /><summary type="html">Over the last few days I played with tool-based architecture validation, to give colleagues a basic introduction to the whole topic.</summary></entry><entry><title type="html">Benthos</title><link href="http://localhost:9000/2020/09/17/benthos.html" rel="alternate" type="text/html" title="Benthos" /><published>2020-09-17T17:00:00+02:00</published><updated>2020-09-17T17:00:00+02:00</updated><id>http://localhost:9000/2020/09/17/benthos</id><content type="html" xml:base="http://localhost:9000/2020/09/17/benthos.html">&lt;p&gt;Sometimes you discover tools, that sound really awesome, but still
after a while of thinking, you cannot find a good use for it.&lt;/p&gt;

&lt;p&gt;Let me introduce you to &lt;a href=&quot;https://www.benthos.dev/&quot;&gt;Benthos&lt;/a&gt;, a tool
to basically knit an input to an output, optionally with one or many
plug-able content processor.&lt;/p&gt;

&lt;p&gt;From my understanding, it behaves like a pipe, just for everything that
can have and/or consume any content.&lt;/p&gt;

&lt;p&gt;To be continued..&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="streams" /><category term="processor" /><summary type="html">Sometimes you discover tools, that sound really awesome, but still after a while of thinking, you cannot find a good use for it.</summary></entry><entry><title type="html">Value objects</title><link href="http://localhost:9000/2020/09/16/value-objects.html" rel="alternate" type="text/html" title="Value objects" /><published>2020-09-16T12:00:00+02:00</published><updated>2020-09-16T12:00:00+02:00</updated><id>http://localhost:9000/2020/09/16/value-objects</id><content type="html" xml:base="http://localhost:9000/2020/09/16/value-objects.html">&lt;p&gt;Here, whenever we are talking about the general topic &lt;strong&gt;value objects&lt;/strong&gt;, sooner
or later we end up in a discussion about functionality.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What kind of functionality should be in a value object and what not?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the easiest examples is probably unit types. What you really want
is to have some basic type for units like distances, weights and so on. And when
using them, the most beneficial handling would be, if they encapsulate all logic
related to basic arithmetic:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Kilometer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distanceInKilometer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Meter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distanceInMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Kilometer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totalDistance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distanceInMeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distanceInKilometer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So why do even mention this contrived example? I stumbled upon 
&lt;a href=&quot;https://manifold.systems/&quot;&gt;Manifold framework&lt;/a&gt; and along other useful things
like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Jailbreak&lt;/code&gt; to access private methods and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#define/#ifdef&lt;/code&gt;, it comes
with a really cool way to handle unit types.&lt;/p&gt;

&lt;p&gt;I know strictly speaking this has isnâ€™t even closely related to &lt;strong&gt;DDD&lt;/strong&gt;, but it
still cool and hey, clickbait.&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="ddd" /><category term="frameworks" /><summary type="html">Here, whenever we are talking about the general topic value objects, sooner or later we end up in a discussion about functionality.</summary></entry><entry><title type="html">Architecture decisions</title><link href="http://localhost:9000/2020/09/15/architecture-decisions.html" rel="alternate" type="text/html" title="Architecture decisions" /><published>2020-09-15T08:00:00+02:00</published><updated>2020-09-15T08:00:00+02:00</updated><id>http://localhost:9000/2020/09/15/architecture-decisions</id><content type="html" xml:base="http://localhost:9000/2020/09/15/architecture-decisions.html">&lt;p&gt;Yesterday we had another discussion about architecture documentation 
and especially about decisions made about it. We came to a quick
agreement, that the form makes no difference, but that there &lt;strong&gt;is&lt;/strong&gt; a dire
need for a way to see, &lt;strong&gt;why&lt;/strong&gt; something is like it is.&lt;/p&gt;

&lt;p&gt;One of the tooling suggestions here is &lt;a href=&quot;https://adr.github.io/&quot;&gt;ADR&lt;/a&gt;
(&lt;a href=&quot;https://github.com/npryce/adr-tools&quot;&gt;repo&lt;/a&gt;), which basically is just a
helper for easy to handle markdown files, which can either be placed next
to the code (for microservices) or into a dedicated repository. 
(for macroarchitecture)&lt;/p&gt;

&lt;p&gt;I am always in favor to have docs next to code, so the chance that a) someone
really reads it and more importantly b) keeps it up to date is better. From
my experience a wiki is just a collection of outdated files: &lt;em&gt;Barely read; never
updated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have nice tools for our handiwork, we have to think about &lt;strong&gt;who&lt;/strong&gt;
writes docs and first and foremost &lt;strong&gt;when&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;The latter is really easy, whenever a decision is made like which technology
stack, which testing framework and so on, just write an entry.&lt;/p&gt;

&lt;p&gt;And the answer to the first question? &lt;strong&gt;Probably you!&lt;/strong&gt;&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="architecture" /><category term="docs" /><summary type="html">Yesterday we had another discussion about architecture documentation and especially about decisions made about it. We came to a quick agreement, that the form makes no difference, but that there is a dire need for a way to see, why something is like it is.</summary></entry><entry><title type="html">Diagramming</title><link href="http://localhost:9000/2020/09/09/diagramming.html" rel="alternate" type="text/html" title="Diagramming" /><published>2020-09-09T15:00:00+02:00</published><updated>2020-09-09T15:00:00+02:00</updated><id>http://localhost:9000/2020/09/09/diagramming</id><content type="html" xml:base="http://localhost:9000/2020/09/09/diagramming.html">&lt;p&gt;TL;DR: Never found a good way to automate it; but nice tools.&lt;/p&gt;

&lt;p&gt;While checking for ways to automate the creation of sequence diagrams
I came across &lt;a href=&quot;https://sequencediagram.org&quot;&gt;sequencediagram.org&lt;/a&gt; and
really liked the ease of use and syntax.&lt;/p&gt;

&lt;p&gt;Although the syntax is quite similar to the one of 
&lt;a href=&quot;https://plantuml.com/&quot;&gt;PlantUML&lt;/a&gt;, I really appreciate the idea to do
just one thing in your browser. No client, no frills.&lt;/p&gt;

&lt;p&gt;Another good one is: &lt;a href=&quot;https://github.com/mingrammer/diagrams/blob/master/README.md&quot;&gt;mingrammer/diagrams&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still lack a proper usecase, but the overall idea is nice and it is good
to have a tool to chart cloud-based interaction.&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="diagrams" /><category term="sequence-diagram" /><category term="cloud" /><summary type="html">TL;DR: Never found a good way to automate it; but nice tools.</summary></entry><entry><title type="html">API testing</title><link href="http://localhost:9000/2020/09/06/api-testing.html" rel="alternate" type="text/html" title="API testing" /><published>2020-09-06T12:00:00+02:00</published><updated>2020-09-06T12:00:00+02:00</updated><id>http://localhost:9000/2020/09/06/api-testing</id><content type="html" xml:base="http://localhost:9000/2020/09/06/api-testing.html">&lt;p&gt;Testing APIs is getting more and more complex and therefore thereâ€™s lots of
tooling out there to assist.&lt;/p&gt;

&lt;p&gt;One of the better known-tools is &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt;, but
I am annoyed of it lately. The UI is really slow and sometimes it is quite
painful to get around with it, especially with the collections. A plus is
the handling of tests.&lt;/p&gt;

&lt;p&gt;The more light-weight version &lt;a href=&quot;https://hoppscotch.io/&quot;&gt;Hoppscotch&lt;/a&gt; (formerly
known as &lt;em&gt;postwoman&lt;/em&gt;) makes the UI a bit easier to handle, because it is
browser-based without the whole electron bloat, but still kind of weird.&lt;/p&gt;

&lt;p&gt;So far I &lt;a href=&quot;https://testmace.com/&quot;&gt;Testmace&lt;/a&gt; makes a good impression on me,
but unfortunately I donâ€™t have it on my testing rig and cannot give it a
try for real things.&lt;/p&gt;

&lt;p&gt;The same is true for &lt;a href=&quot;https://insomnia.rest/&quot;&gt;Insomnia&lt;/a&gt;, it looks promising and
I really dig the idea of separating the designing stuff from the base testing
tool.&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="testing" /><category term="api" /><summary type="html">Testing APIs is getting more and more complex and therefore thereâ€™s lots of tooling out there to assist.</summary></entry><entry><title type="html">Windows tools</title><link href="http://localhost:9000/2020/09/03/windows-tools.html" rel="alternate" type="text/html" title="Windows tools" /><published>2020-09-03T16:30:00+02:00</published><updated>2020-09-03T16:30:00+02:00</updated><id>http://localhost:9000/2020/09/03/windows-tools</id><content type="html" xml:base="http://localhost:9000/2020/09/03/windows-tools.html">&lt;p&gt;Oh well - process management under windows is a kind of pain. I especially
had to deal with my maven/quarkus/intelliJ combination:&lt;/p&gt;

&lt;p&gt;I can easily start qQarkus and attach a debugger, but intellij always fails
to stop the related processes and ends up stuck. For a while, I used the task
manager to manually kill the processes.&lt;/p&gt;

&lt;p&gt;Sometimes I didnâ€™t kill all properly and the port was blocked etc, you probably
know the drill.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;wmic&lt;/em&gt; to the rescue! With it, you can basiscally use SQL-ish syntax to do
funny things like killing processes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wmic process where &quot;commandline like '%%projectname%%jar%%'&quot; delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just put this inside of a batch file and tell intellij to call it. Et voila!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://superuser.com/questions/1003921/how-to-show-full-command-line-of-all-processes-in-windows&quot;&gt;https://superuser.com/questions/1003921/how-to-show-full-command-line-of-all-processes-in-windows&lt;/a&gt;&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="java" /><category term="quarkus" /><category term="maven" /><category term="intellij" /><category term="windows" /><category term="tools" /><summary type="html">Oh well - process management under windows is a kind of pain. I especially had to deal with my maven/quarkus/intelliJ combination:</summary></entry><entry><title type="html">Know your tools</title><link href="http://localhost:9000/2020/09/01/know-your-tools.html" rel="alternate" type="text/html" title="Know your tools" /><published>2020-09-01T14:30:00+02:00</published><updated>2020-09-01T14:30:00+02:00</updated><id>http://localhost:9000/2020/09/01/know-your-tools</id><content type="html" xml:base="http://localhost:9000/2020/09/01/know-your-tools.html">&lt;p&gt;Iâ€™ve been using citrix and a windows VM for quite a while, almost two years and
never got used to the changes of the shortcuts.&lt;/p&gt;

&lt;p&gt;And with macOS as host and windows in a VM it becomes quite nasty.&lt;/p&gt;

&lt;p&gt;So I spend some hours to figure out how to bind the proper commands to get
a faster workflow and I can already say it always pays to do exactly that.&lt;/p&gt;

&lt;p&gt;I normally just learn new commands and shortcuts, whenever I do pair/mob, but
while reading through the possible commands I found some helpful things.&lt;/p&gt;

&lt;p&gt;Like popup menus for run configs and open file buffers..&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="tools" /><category term="soft-skills" /><category term="citrix" /><category term="intellij" /><summary type="html">Iâ€™ve been using citrix and a windows VM for quite a while, almost two years and never got used to the changes of the shortcuts.</summary></entry><entry><title type="html">Naming and DDD</title><link href="http://localhost:9000/2020/08/18/naming-and-ddd.html" rel="alternate" type="text/html" title="Naming and DDD" /><published>2020-08-18T08:30:00+02:00</published><updated>2020-08-18T08:30:00+02:00</updated><id>http://localhost:9000/2020/08/18/naming-and-ddd</id><content type="html" xml:base="http://localhost:9000/2020/08/18/naming-and-ddd.html">&lt;p&gt;Starters like the one in the linked article always hook me, I probably donâ€™t
have to actually suggest to read this series and pray for any successor in our 
lifetime.&lt;/p&gt;

&lt;p&gt;Still, naming things is difficult, especially in a changing world like ours. 
When you settle for a name, you sometimes end adding stuff to justify the given
name.&lt;/p&gt;

&lt;p&gt;Ever built a manager, that wasnâ€™t actually managing anything?&lt;/p&gt;

&lt;p&gt;One suggestion here is to use a fixed scheme like colors and give the resulting
thing a meaning name, once you are happy with the result.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://deliverydoubled.com/name-as-if-your-life-depends-on-it-a-guide-to-cleaner-code/&quot;&gt;https://deliverydoubled.com/name-as-if-your-life-depends-on-it-a-guide-to-cleaner-code/&lt;/a&gt;&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="naming" /><category term="ddd" /><category term="clean-code" /><category term="just-a-link" /><summary type="html">Starters like the one in the linked article always hook me, I probably donâ€™t have to actually suggest to read this series and pray for any successor in our lifetime.</summary></entry><entry><title type="html">Property based testing</title><link href="http://localhost:9000/2020/08/13/property-based-testing.html" rel="alternate" type="text/html" title="Property based testing" /><published>2020-08-13T12:10:00+02:00</published><updated>2020-08-13T12:10:00+02:00</updated><id>http://localhost:9000/2020/08/13/property-based-testing</id><content type="html" xml:base="http://localhost:9000/2020/08/13/property-based-testing.html">&lt;p&gt;I initially read about the Python framework
&lt;a href=&quot;https://hypothesis.readthedocs.io/en/latest/&quot;&gt;Hypothesis&lt;/a&gt; and I must say
I like the overall idea to just define ranges and the framework does dozen of
tests with random values from this range.&lt;/p&gt;

&lt;p&gt;This might lead to combinations, you normally wouldnâ€™t think of.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Now I just need to find time to give it a spin.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Update: I found some time to play with a java version of this idea 
(&lt;a href=&quot;https://jqwik.net/&quot;&gt;jqwik&lt;/a&gt;) and so far the outcome looks promising. I found
some easy bugs and the whole handling is pretty straight forward.&lt;/p&gt;</content><author><name>Christoph Kappel</name></author><category term="java" /><category term="testing" /><category term="just-a-link" /><category term="never-tried" /><summary type="html">I initially read about the Python framework Hypothesis and I must say I like the overall idea to just define ranges and the framework does dozen of tests with random values from this range.</summary></entry></feed>